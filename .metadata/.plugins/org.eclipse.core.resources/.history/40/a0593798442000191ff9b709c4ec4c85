package model;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStream;
import java.util.LinkedList;

public class WinnerBoard extends LinkedList<Winner> implements OnPostEventListener{

	public final static int MAX_SIZE = 15;
	
	@Override
	public void onPostEvent(PostEvent event) {
		String table = this.toHTMLTable();
		try {
			this.add(new Winner(event.getMessage()));
			table = this.toHTMLTable();
			System.out.println("Winner added!");
			System.out.println(table);
			this.writeHTMLToFile();
			sendResponse(event, table);
		} catch (MessageFormatException e1) {
			if (event.getMessage().equals("Initial")) {
				sendResponse(event, table);
			}
		}
	}

	private void sendResponse(PostEvent event, String table) {
		OutputStream out;
		try {
			out = event.getSocket().getOutputStream();
			out.write("HTTP/1.1 200 OK\nContent-Type: text/html\r\n\r\n".getBytes());
			out.write(table.getBytes());
			out.close();
		} catch (IOException e) {
			System.out.println("Unknown IO Error.");
			System.exit(0);
		}
	}
	
	/**
	 * Override the add method to make a stack.
	 * 
	 * @param winner the winner to add
	 */
	@Override
	public boolean add(Winner winner) {
		if (winner != null) {
			if(this.size() >= 15) {
				while(this.size() >= 15) {
					this.remove(this.size() - 1);
				}
			}
			this.add(0, winner);
		} else {
			return false;
		}
		return true;
	}
	
	public String toHTMLTable() {
		String retString = "<table style=\"width:25%\">\n<tr>\n<th>Name</th>\n<th>Score</th>\n</tr>\n";

		for(Winner winner : this) {
			retString += "<tr>\n <td> " + winner.getName() + "</td>\n<td> " + winner.getScore() + "</td>\n</tr>\n";
		}
		return retString;
	}
	
	public void writeHTMLToFile() {
		File file = new File("..\\table.html");
		BufferedWriter write;
		try {
			write = new BufferedWriter(new FileWriter(file));
			write.write("<!DOCTYPE html>\r\n" + 
					"<html lang=\"en\" dir=\"ltr\">\r\n" + 
					"  <head>\r\n" + 
					"    <meta charset=\"utf-8\">\r\n" + 
					"    <title>LeaderBoards</title>\r\n" + 
					"  </head>\r\n" + 
					"  <body>");
			write.write(toHTMLTable());
			write.write("</body>\r\n" + 
					"</html>");
			write.close();
		} catch (IOException e) {
			System.out.println("Unknown IO Exception.");
			e.printStackTrace();
		}
		
	}
	
	public boolean saveToFile(String fileName) {
		File file = new File(fileName);
		try {
			BufferedWriter write = new BufferedWriter(new FileWriter(file));
			for(Winner winner : this) {
				write.write(winner.toString() + "\n");
			}
			write.close();
		} catch (IOException e) {
			return false;
		}
		return true;
	}
	
	public boolean readFile(String fileName) {
		try {
			BufferedReader reader = new BufferedReader(new FileReader(new File( fileName)));
			String line = reader.readLine();
			while(line != null) {
				int index = line.indexOf(',');
				String name = line.substring(0, index);
				int index2 = line.indexOf(',', index + 1);
				int leftScore = new Integer(line.substring(index + 1, index2)).intValue();
				int index3 = line.indexOf(';');
				int rightScore = new Integer(line.substring(index2 + 1, index3));
				this.add(new Winner(name, leftScore, rightScore));
			}
		} catch (FileNotFoundException e) {
			System.out.println("File doesn't exist!\n Creating new file...\n");
			File file = new File(fileName);
			try {
				file.createNewFile();
				System.out.println("File created! (" + file.getAbsolutePath() + ")");
				readFile(fileName);
			} catch (IOException e1) {
				System.out.print("Unknown Error!");
				System.exit(0);
			}
		} catch (IOException e) {
			System.out.println("Unknown problem reading file!");
			System.exit(0);
		}
		return true;
	}
}
